// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

package com.github.liuzhixing.domain.grpc;

/**
 * @ClassName HttpOrBuilder
 * @Description Trace指标转换逻辑
 * @Author liuzhixing
 * @Date 2019-09-18 17:59
 **/
public interface HttpOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.api.Http)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A list of HTTP configuration rules that apply to individual API methods.
   * **NOTE:** All service configuration rules follow "last one wins" order.
   * </pre>
   *
   * <code>repeated .google.api.HttpRule rules = 1;</code>
   */
  java.util.List<com.github.liuzhixing.domain.grpc.HttpRule>
      getRulesList();
  /**
   * <pre>
   * A list of HTTP configuration rules that apply to individual API methods.
   * **NOTE:** All service configuration rules follow "last one wins" order.
   * </pre>
   *
   * <code>repeated .google.api.HttpRule rules = 1;</code>
   */
  com.github.liuzhixing.domain.grpc.HttpRule getRules(int index);
  /**
   * <pre>
   * A list of HTTP configuration rules that apply to individual API methods.
   * **NOTE:** All service configuration rules follow "last one wins" order.
   * </pre>
   *
   * <code>repeated .google.api.HttpRule rules = 1;</code>
   */
  int getRulesCount();
  /**
   * <pre>
   * A list of HTTP configuration rules that apply to individual API methods.
   * **NOTE:** All service configuration rules follow "last one wins" order.
   * </pre>
   *
   * <code>repeated .google.api.HttpRule rules = 1;</code>
   */
  java.util.List<? extends com.github.liuzhixing.domain.grpc.HttpRuleOrBuilder>
      getRulesOrBuilderList();
  /**
   * <pre>
   * A list of HTTP configuration rules that apply to individual API methods.
   * **NOTE:** All service configuration rules follow "last one wins" order.
   * </pre>
   *
   * <code>repeated .google.api.HttpRule rules = 1;</code>
   */
  com.github.liuzhixing.domain.grpc.HttpRuleOrBuilder getRulesOrBuilder(
      int index);

  /**
   * <pre>
   * When set to true, URL path parmeters will be fully URI-decoded except in
   * cases of single segment matches in reserved expansion, where "%2F" will be
   * left encoded.
   * The default behavior is to not decode RFC 6570 reserved characters in multi
   * segment matches.
   * </pre>
   *
   * <code>bool fully_decode_reserved_expansion = 2;</code>
   */
  boolean getFullyDecodeReservedExpansion();
}
